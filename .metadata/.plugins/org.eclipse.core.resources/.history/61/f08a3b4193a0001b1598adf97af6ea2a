package unitTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;

import org.junit.Test;

import events.Event;

public class PricingTests {

	@Test
	public void test() {
//		This first test isn't really testing anything.  It is here to show 
//		the syntax of creating dates, adding days to dates, and calculating
//		the difference (in days) between 2 dates
			
		LocalDate startDate = LocalDate.of(2021,  04,  16);
		LocalDate endDate = startDate.plusDays(100);
		long expectedResult = 100;
		
		long numberOfDaysBetween = ChronoUnit.DAYS.between(startDate, endDate);
		
		assertTrue(expectedResult == numberOfDaysBetween);
	}
	
	@Test
	public void testFewerThan30DaysOnSale()  {
		long daysOnSale = 29;
		LocalDate today = LocalDate.now();
		LocalDate dateTicketsWentOnSale = today.minusDays(daysOnSale);
		int ticketPrice = 100;
		
		Event uut = new Event();
		uut.setDateTicketsWentOnSale(dateTicketsWentOnSale);
		uut.setTicketPrice(ticketPrice);
		
		int actualTicketPrice = uut.getTicketPrice(today);
		
		assertEquals(ticketPrice, actualTicketPrice);
		
	}
	
	@Test
	public void test30DaysOnSaleLessThan20PercentSold()  {
		long daysOnSale = 30;
		LocalDate today = LocalDate.now();
		LocalDate dateTicketsWentOnSale = today.minusDays(daysOnSale);
		int ticketPrice = 100;
		
		Event uut = new Event();
		uut.setDateTicketsWentOnSale(dateTicketsWentOnSale);
		uut.setTicketPrice(ticketPrice);
		
		int actualTicketPrice = uut.getTicketPrice(today);	
		
		assertEquals(ticketPrice, actualTicketPrice);
	}
	
}
